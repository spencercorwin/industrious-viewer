{"version":3,"sources":["src/utils.ts","src/ClassInfo.tsx","src/ErrorView.tsx","src/LastRefreshDate.tsx","src/RefreshFailed.tsx","src/AppLoadView.tsx","src/DonateButton.tsx","src/App.tsx","App.ts"],"names":["scrape","a","async","axios","get","res","status","Error","strings","data","class_sessions","split","filter","str","includes","length","initialString","dataUrls","slice","dateRegex","openRegex","results","map","dataStr","dateMatch","match","rawDate","cleanedDate","decodeURIComponent","replace","date","Date","openMatch","dateRaw","isFull","openIn","availableIn","toString","open","Number","available","isNaN","console","log","item","sortedResults","sort","b","undefined","getTime","ClassInfo","takenText","title","toLocaleDateString","weekday","month","day","hour","minute","Text","style","styles","container","StyleSheet","create","marginTop","ErrorView","props","View","message","flex","backgroundColor","alignItems","justifyContent","LastRefreshDate","text","marginBottom","RefreshFailed","_props","AppLoadingView","ActivityIndicator","size","animating","color","Colors","DonateButton","handlePress","useCallback","Linking","openURL","Button","onPress","App","useState","response","setResponse","isLoading","setIsLoading","isError","setIsError","errorMessage","setErrorMessage","lastRefreshDate","setLastRefreshDate","refreshing","setRefreshing","refreshFailed","setRefreshFailed","loadData","success","error","String","onRefresh","useEffect","theme","DefaultTheme","FlatList","renderItem","keyExtractor","refreshControl","RefreshControl"],"mappings":"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","file":"static/js/app.7a06f492.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst url =\n  \"https://widgets.mindbodyonline.com/widgets/schedules/168830/load_markup\";\n\nexport interface ResultData {\n  readonly date: Date;\n  readonly dateRaw: string;\n  readonly isFull: boolean;\n  readonly open?: number;\n  readonly available?: number;\n}\n\nexport const scrape = async (): Promise<ResultData[]> => {\n  const res = await axios.get(url);\n\n  if (res.status !== 200) {\n    throw new Error(\"Error fetching data\");\n  }\n\n  const strings = res.data.class_sessions\n    .split(\"scheduleData\")\n    .filter((str: string) => str.includes(\"hc_availability\"));\n  if (strings.length === 0) {\n    throw new Error(\"Split on scheduleData did not work\");\n  }\n  const initialString = strings[0];\n  const dataUrls = initialString\n    .split(\"data-url\")\n    .slice(1)\n    .filter((str: string) => str.includes(\"add_booking\"));\n\n  if (dataUrls.length === 0) {\n    throw new Error(\"No data-urls found\");\n  }\n\n  // eslint-disable-next-line require-unicode-regexp\n  const dateRegex = /.*info%5D=(.*?(?:pm|am)).*/;\n  // eslint-disable-next-line require-unicode-regexp\n  const openRegex = /.*open-(\\d+)-(\\d+).*/;\n\n  const results: ResultData[] = dataUrls\n    .map((dataStr: string) => {\n      const dateMatch = dataStr.match(dateRegex);\n      if (dateMatch === null || dateMatch.length === 0) {\n        console.log(\n          `Date regex did not match anything. Raw dataStr: ${dataStr}`\n        );\n\n        return;\n      }\n      const [_, rawDate] = dateMatch;\n      const decodedDate = decodeURIComponent(rawDate);\n      const cleanedDate = decodedDate.replace(/\\+/gu, \" \");\n      const date = new Date(cleanedDate);\n\n      const openMatch = dataStr.match(openRegex);\n      const hasWaitlist =\n        dataStr.includes(\"wailist\") || dataStr.includes(\"Waitlist\");\n      if (hasWaitlist || openMatch === null || openMatch.length === 0) {\n        return { date, dateRaw: cleanedDate, isFull: true };\n      }\n\n      const [__, openIn, availableIn] = openMatch;\n\n      if (date.toString() === \"Invalid Date\") {\n        console.log(\n          `Date string was parsed as invalid date. Raw dataStr: ${dataStr}`\n        );\n\n        return;\n      }\n      const open = Number(openIn);\n      const available = Number(availableIn);\n      if (Number.isNaN(open) || Number.isNaN(available)) {\n        console.log(\n          `Open or available was parsed as NaN. Raw dataStr: ${dataStr}`\n        );\n\n        return;\n      }\n\n      return { date, dateRaw: cleanedDate, isFull: false, open, available };\n    })\n    .filter((item: ResultData) => item != null);\n\n  if (results.length === 0) {\n    throw new Error(\"No results found. Something went wrong. Check logs\");\n  }\n\n  const sortedResults = results.sort((a, b) => {\n    if (a.date === undefined) {\n      console.log(a);\n    }\n    if (b.date === undefined) {\n      console.log(b);\n    }\n    return a.date.getTime() - b.date.getTime();\n  });\n\n  return sortedResults;\n};\n","import { ResultData } from \"./utils\";\nimport { StyleSheet, Text } from \"react-native\";\n\ninterface Props {\n  readonly data: ResultData;\n}\n\nexport default function ClassInfo({ data }: Props) {\n  const open = data?.open ?? 0;\n  const available = data?.available ?? 0;\n  const taken = available - open;\n  const takenText = `${taken} of ${available} taken`;\n  const options: Intl.DateTimeFormatOptions = {\n    weekday: \"short\",\n    month: \"short\",\n    day: \"numeric\",\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n  };\n  const title = `${data.date.toLocaleDateString(\"en-US\", options)} -${\" \"} ${\n    data.isFull ? \"Full\" : takenText\n  }`;\n\n  return <Text style={styles.container}>{title}</Text>;\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginTop: 5,\n  },\n});\n","import { StyleSheet, Text, View } from \"react-native\";\n\ninterface Props {\n  readonly message: string;\n}\n\nexport default function ErrorView(props: Props) {\n  return (\n    <View style={styles.container}>\n      <Text>Error: {props.message}</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n","import { Text, StyleSheet } from \"react-native\";\n\ninterface Props {\n  readonly date?: Date;\n}\n\nexport default function LastRefreshDate({ date }: Props) {\n  const options: Intl.DateTimeFormatOptions = {\n    weekday: \"short\",\n    month: \"short\",\n    day: \"numeric\",\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n  };\n  return (\n    <Text style={styles.text}>\n      Last Refreshed: {date?.toLocaleDateString(\"en-US\", options) ?? \"Never\"}\n    </Text>\n  );\n}\n\nconst styles = StyleSheet.create({\n  text: {\n    marginBottom: 10,\n  },\n});\n","import { Text } from \"react-native\";\n\ninterface Props {}\n\nexport default function RefreshFailed(_props: Props) {\n  return <Text>Refresh attempt failed</Text>;\n}\n","import { StyleSheet, View } from \"react-native\";\nimport { ActivityIndicator, Colors } from \"react-native-paper\";\n\ninterface Props {}\n\nexport default function AppLoadingView(_props: Props) {\n  return (\n    <View style={styles.container}>\n      <ActivityIndicator size=\"large\" animating={true} color={Colors.black} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n","import { useCallback } from \"react\";\nimport { Button, Linking, StyleSheet } from \"react-native\";\n\nexport default function DonateButton() {\n  const handlePress = useCallback(async () => {\n    await Linking.openURL(\"https://www.buymeacoffee.com/vfHaFpYNA\");\n  }, []);\n\n  return <Button title=\"Buy Me a Coffee\" onPress={handlePress} />;\n}\n","import { FlatList, RefreshControl, StyleSheet, View } from \"react-native\";\nimport { useEffect, useState, useCallback } from \"react\";\nimport { ResultData, scrape } from \"./utils\";\nimport ClassInfo from \"./ClassInfo\";\nimport ErrorView from \"./ErrorView\";\nimport LastRefreshDate from \"./LastRefreshDate\";\nimport RefreshFailed from \"./RefreshFailed\";\nimport {\n  Appbar,\n  Button,\n  DefaultTheme,\n  Provider as PaperProvider,\n} from \"react-native-paper\";\nimport AppLoadingView from \"./AppLoadView\";\nimport DonateButton from \"./DonateButton\";\n\ninterface LoadDataResult {\n  readonly success: boolean;\n  readonly data: ResultData[];\n  readonly error?: string;\n}\n\nexport default function App() {\n  const [response, setResponse] = useState<ResultData[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [lastRefreshDate, setLastRefreshDate] = useState<Date | undefined>();\n  const [refreshing, setRefreshing] = useState(false);\n  const [refreshFailed, setRefreshFailed] = useState(false);\n\n  const loadData = async (): Promise<LoadDataResult> => {\n    try {\n      const res = await scrape();\n\n      return { success: true, data: res, error: undefined };\n    } catch (error) {\n      return {\n        success: false,\n        data: [],\n        error: error instanceof Error ? error.message : String(error),\n      };\n    }\n  };\n\n  const onRefresh = useCallback(async () => {\n    const { success, data } = await loadData();\n    setRefreshFailed(false);\n    if (success) {\n      setLastRefreshDate(new Date());\n      setResponse(data);\n    } else {\n      setRefreshFailed(true);\n    }\n    setRefreshing(false);\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      setIsLoading(true);\n      const { success, data, error } = await loadData();\n      if (success) {\n        setRefreshFailed(false);\n        setLastRefreshDate(new Date());\n        setResponse(data);\n      } else {\n        setErrorMessage(error as string);\n        setIsError(true);\n      }\n      setIsLoading(false);\n    })();\n  }, []);\n\n  const theme = {\n    ...DefaultTheme,\n  };\n\n  return (\n    <PaperProvider theme={theme}>\n      {isLoading ? (\n        <AppLoadingView />\n      ) : isError ? (\n        <ErrorView message={errorMessage} />\n      ) : (\n        <View style={styles.container}>\n          <LastRefreshDate date={lastRefreshDate} />\n          {refreshFailed ? <RefreshFailed /> : <></>}\n          <FlatList\n            data={response}\n            renderItem={({ item }) => <ClassInfo data={item} />}\n            keyExtractor={({ dateRaw }) => dateRaw}\n            refreshControl={\n              <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n            }\n          />\n        </View>\n      )}\n      <DonateButton />\n    </PaperProvider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 40,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n","import App from \"./src/App\";\n\nexport default App;\n"],"sourceRoot":""}